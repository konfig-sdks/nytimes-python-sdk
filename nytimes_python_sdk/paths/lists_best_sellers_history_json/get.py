# coding: utf-8

"""
    Books API

    The Books API provides information about book reviews and The New York Times Best Sellers lists.  ## Best Sellers Lists Services ### List Names The lists/names service returns a list of all the NYT Best Sellers Lists.  Some lists are published weekly and others monthly.  The response includes when each list was first published and last published.  ``` /lists/names.json ```  ### List Data  The lists/{date}/{name} service returns the books on the best sellers list for the specified date and list name.  ``` /lists/2019-01-20/hardcover-fiction.json ```  Use \"current\" for {date} to get the latest list. ``` /lists/current/hardcover-fiction.json ```  ## Book Reviews Services  The book reviews service lets you get NYT book review by author, ISBN, or title.  ``` /reviews.json?author=Michelle+Obama ```  ``` /reviews.json?isbn=9781524763138 ```  ``` /reviews.json?title=Becoming ```  ## Example Calls  ``` https://api.nytimes.com/svc/books/v3/lists/current/hardcover-fiction.json?api-key=yourkey ```  ``` https://api.nytimes.com/svc/books/v3/reviews.json?author=Stephen+King&api-key=yourkey ``` 

    The version of the OpenAPI document: 3.0.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from nytimes_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from nytimes_python_sdk.api_response import AsyncGeneratorResponse
from nytimes_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nytimes_python_sdk import schemas  # noqa: F401

from nytimes_python_sdk.model.list_get_history_response import ListGetHistoryResponse as ListGetHistoryResponseSchema

from nytimes_python_sdk.type.list_get_history_response import ListGetHistoryResponse

from ...api_client import Dictionary
from nytimes_python_sdk.pydantic.list_get_history_response import ListGetHistoryResponse as ListGetHistoryResponsePydantic

from . import path

# Query params
AgeGroupSchema = schemas.StrSchema
AuthorSchema = schemas.StrSchema
ContributorSchema = schemas.StrSchema
IsbnSchema = schemas.StrSchema


class OffsetSchema(
    schemas.IntSchema
):


    class MetaOapg:
        multiple_of = 20
PriceSchema = schemas.StrSchema
PublisherSchema = schemas.StrSchema
TitleSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'age-group': typing.Union[AgeGroupSchema, str, ],
        'author': typing.Union[AuthorSchema, str, ],
        'contributor': typing.Union[ContributorSchema, str, ],
        'isbn': typing.Union[IsbnSchema, str, ],
        'offset': typing.Union[OffsetSchema, decimal.Decimal, int, ],
        'price': typing.Union[PriceSchema, str, ],
        'publisher': typing.Union[PublisherSchema, str, ],
        'title': typing.Union[TitleSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_age_group = api_client.QueryParameter(
    name="age-group",
    style=api_client.ParameterStyle.FORM,
    schema=AgeGroupSchema,
    explode=True,
)
request_query_author = api_client.QueryParameter(
    name="author",
    style=api_client.ParameterStyle.FORM,
    schema=AuthorSchema,
    explode=True,
)
request_query_contributor = api_client.QueryParameter(
    name="contributor",
    style=api_client.ParameterStyle.FORM,
    schema=ContributorSchema,
    explode=True,
)
request_query_isbn = api_client.QueryParameter(
    name="isbn",
    style=api_client.ParameterStyle.FORM,
    schema=IsbnSchema,
    explode=True,
)
request_query_offset = api_client.QueryParameter(
    name="offset",
    style=api_client.ParameterStyle.FORM,
    schema=OffsetSchema,
    explode=True,
)
request_query_price = api_client.QueryParameter(
    name="price",
    style=api_client.ParameterStyle.FORM,
    schema=PriceSchema,
    explode=True,
)
request_query_publisher = api_client.QueryParameter(
    name="publisher",
    style=api_client.ParameterStyle.FORM,
    schema=PublisherSchema,
    explode=True,
)
request_query_title = api_client.QueryParameter(
    name="title",
    style=api_client.ParameterStyle.FORM,
    schema=TitleSchema,
    explode=True,
)
_auth = [
    'api-key',
]
SchemaFor200ResponseBodyApplicationJson = ListGetHistoryResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: ListGetHistoryResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: ListGetHistoryResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _get_history_mapped_args(
        self,
        age_group: typing.Optional[str] = None,
        author: typing.Optional[str] = None,
        contributor: typing.Optional[str] = None,
        isbn: typing.Optional[str] = None,
        offset: typing.Optional[int] = None,
        price: typing.Optional[str] = None,
        publisher: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        if age_group is not None:
            _query_params["age-group"] = age_group
        if author is not None:
            _query_params["author"] = author
        if contributor is not None:
            _query_params["contributor"] = contributor
        if isbn is not None:
            _query_params["isbn"] = isbn
        if offset is not None:
            _query_params["offset"] = offset
        if price is not None:
            _query_params["price"] = price
        if publisher is not None:
            _query_params["publisher"] = publisher
        if title is not None:
            _query_params["title"] = title
        args.query = _query_params
        return args

    async def _aget_history_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Best Sellers List History
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_age_group,
            request_query_author,
            request_query_contributor,
            request_query_isbn,
            request_query_offset,
            request_query_price,
            request_query_publisher,
            request_query_title,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/lists/best-sellers/history.json',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _get_history_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Best Sellers List History
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_age_group,
            request_query_author,
            request_query_contributor,
            request_query_isbn,
            request_query_offset,
            request_query_price,
            request_query_publisher,
            request_query_title,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/lists/best-sellers/history.json',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class GetHistoryRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aget_history(
        self,
        age_group: typing.Optional[str] = None,
        author: typing.Optional[str] = None,
        contributor: typing.Optional[str] = None,
        isbn: typing.Optional[str] = None,
        offset: typing.Optional[int] = None,
        price: typing.Optional[str] = None,
        publisher: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_history_mapped_args(
            age_group=age_group,
            author=author,
            contributor=contributor,
            isbn=isbn,
            offset=offset,
            price=price,
            publisher=publisher,
            title=title,
        )
        return await self._aget_history_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def get_history(
        self,
        age_group: typing.Optional[str] = None,
        author: typing.Optional[str] = None,
        contributor: typing.Optional[str] = None,
        isbn: typing.Optional[str] = None,
        offset: typing.Optional[int] = None,
        price: typing.Optional[str] = None,
        publisher: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_history_mapped_args(
            age_group=age_group,
            author=author,
            contributor=contributor,
            isbn=isbn,
            offset=offset,
            price=price,
            publisher=publisher,
            title=title,
        )
        return self._get_history_oapg(
            query_params=args.query,
        )

class GetHistory(BaseApi):

    async def aget_history(
        self,
        age_group: typing.Optional[str] = None,
        author: typing.Optional[str] = None,
        contributor: typing.Optional[str] = None,
        isbn: typing.Optional[str] = None,
        offset: typing.Optional[int] = None,
        price: typing.Optional[str] = None,
        publisher: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> ListGetHistoryResponsePydantic:
        raw_response = await self.raw.aget_history(
            age_group=age_group,
            author=author,
            contributor=contributor,
            isbn=isbn,
            offset=offset,
            price=price,
            publisher=publisher,
            title=title,
            **kwargs,
        )
        if validate:
            return ListGetHistoryResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(ListGetHistoryResponsePydantic, raw_response.body)
    
    
    def get_history(
        self,
        age_group: typing.Optional[str] = None,
        author: typing.Optional[str] = None,
        contributor: typing.Optional[str] = None,
        isbn: typing.Optional[str] = None,
        offset: typing.Optional[int] = None,
        price: typing.Optional[str] = None,
        publisher: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        validate: bool = False,
    ) -> ListGetHistoryResponsePydantic:
        raw_response = self.raw.get_history(
            age_group=age_group,
            author=author,
            contributor=contributor,
            isbn=isbn,
            offset=offset,
            price=price,
            publisher=publisher,
            title=title,
        )
        if validate:
            return ListGetHistoryResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(ListGetHistoryResponsePydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        age_group: typing.Optional[str] = None,
        author: typing.Optional[str] = None,
        contributor: typing.Optional[str] = None,
        isbn: typing.Optional[str] = None,
        offset: typing.Optional[int] = None,
        price: typing.Optional[str] = None,
        publisher: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_history_mapped_args(
            age_group=age_group,
            author=author,
            contributor=contributor,
            isbn=isbn,
            offset=offset,
            price=price,
            publisher=publisher,
            title=title,
        )
        return await self._aget_history_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def get(
        self,
        age_group: typing.Optional[str] = None,
        author: typing.Optional[str] = None,
        contributor: typing.Optional[str] = None,
        isbn: typing.Optional[str] = None,
        offset: typing.Optional[int] = None,
        price: typing.Optional[str] = None,
        publisher: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_history_mapped_args(
            age_group=age_group,
            author=author,
            contributor=contributor,
            isbn=isbn,
            offset=offset,
            price=price,
            publisher=publisher,
            title=title,
        )
        return self._get_history_oapg(
            query_params=args.query,
        )

