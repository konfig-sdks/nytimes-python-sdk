# coding: utf-8

"""
    Books API

    The Books API provides information about book reviews and The New York Times Best Sellers lists.  ## Best Sellers Lists Services ### List Names The lists/names service returns a list of all the NYT Best Sellers Lists.  Some lists are published weekly and others monthly.  The response includes when each list was first published and last published.  ``` /lists/names.json ```  ### List Data  The lists/{date}/{name} service returns the books on the best sellers list for the specified date and list name.  ``` /lists/2019-01-20/hardcover-fiction.json ```  Use \"current\" for {date} to get the latest list. ``` /lists/current/hardcover-fiction.json ```  ## Book Reviews Services  The book reviews service lets you get NYT book review by author, ISBN, or title.  ``` /reviews.json?author=Michelle+Obama ```  ``` /reviews.json?isbn=9781524763138 ```  ``` /reviews.json?title=Becoming ```  ## Example Calls  ``` https://api.nytimes.com/svc/books/v3/lists/current/hardcover-fiction.json?api-key=yourkey ```  ``` https://api.nytimes.com/svc/books/v3/reviews.json?author=Stephen+King&api-key=yourkey ``` 

    The version of the OpenAPI document: 3.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nytimes_python_sdk import schemas  # noqa: F401


class ReviewGetBookReviewsResponseResultsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            summary = schemas.StrSchema
            url = schemas.StrSchema
            publication_dt = schemas.StrSchema
            byline = schemas.StrSchema
            book_title = schemas.StrSchema
            book_author = schemas.StrSchema
        
            @staticmethod
            def isbn13() -> typing.Type['ReviewGetBookReviewsResponseResultsItemIsbn13']:
                return ReviewGetBookReviewsResponseResultsItemIsbn13
            __annotations__ = {
                "summary": summary,
                "url": url,
                "publication_dt": publication_dt,
                "byline": byline,
                "book_title": book_title,
                "book_author": book_author,
                "isbn13": isbn13,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summary"]) -> MetaOapg.properties.summary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publication_dt"]) -> MetaOapg.properties.publication_dt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["byline"]) -> MetaOapg.properties.byline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["book_title"]) -> MetaOapg.properties.book_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["book_author"]) -> MetaOapg.properties.book_author: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isbn13"]) -> 'ReviewGetBookReviewsResponseResultsItemIsbn13': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["summary", "url", "publication_dt", "byline", "book_title", "book_author", "isbn13", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summary"]) -> typing.Union[MetaOapg.properties.summary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publication_dt"]) -> typing.Union[MetaOapg.properties.publication_dt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["byline"]) -> typing.Union[MetaOapg.properties.byline, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["book_title"]) -> typing.Union[MetaOapg.properties.book_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["book_author"]) -> typing.Union[MetaOapg.properties.book_author, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isbn13"]) -> typing.Union['ReviewGetBookReviewsResponseResultsItemIsbn13', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["summary", "url", "publication_dt", "byline", "book_title", "book_author", "isbn13", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        summary: typing.Union[MetaOapg.properties.summary, str, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        publication_dt: typing.Union[MetaOapg.properties.publication_dt, str, schemas.Unset] = schemas.unset,
        byline: typing.Union[MetaOapg.properties.byline, str, schemas.Unset] = schemas.unset,
        book_title: typing.Union[MetaOapg.properties.book_title, str, schemas.Unset] = schemas.unset,
        book_author: typing.Union[MetaOapg.properties.book_author, str, schemas.Unset] = schemas.unset,
        isbn13: typing.Union['ReviewGetBookReviewsResponseResultsItemIsbn13', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReviewGetBookReviewsResponseResultsItem':
        return super().__new__(
            cls,
            *args,
            summary=summary,
            url=url,
            publication_dt=publication_dt,
            byline=byline,
            book_title=book_title,
            book_author=book_author,
            isbn13=isbn13,
            _configuration=_configuration,
            **kwargs,
        )

from nytimes_python_sdk.model.review_get_book_reviews_response_results_item_isbn13 import ReviewGetBookReviewsResponseResultsItemIsbn13
