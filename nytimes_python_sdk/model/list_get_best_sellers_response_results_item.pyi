# coding: utf-8

"""
    Books API

    The Books API provides information about book reviews and The New York Times Best Sellers lists.  ## Best Sellers Lists Services ### List Names The lists/names service returns a list of all the NYT Best Sellers Lists.  Some lists are published weekly and others monthly.  The response includes when each list was first published and last published.  ``` /lists/names.json ```  ### List Data  The lists/{date}/{name} service returns the books on the best sellers list for the specified date and list name.  ``` /lists/2019-01-20/hardcover-fiction.json ```  Use \"current\" for {date} to get the latest list. ``` /lists/current/hardcover-fiction.json ```  ## Book Reviews Services  The book reviews service lets you get NYT book review by author, ISBN, or title.  ``` /reviews.json?author=Michelle+Obama ```  ``` /reviews.json?isbn=9781524763138 ```  ``` /reviews.json?title=Becoming ```  ## Example Calls  ``` https://api.nytimes.com/svc/books/v3/lists/current/hardcover-fiction.json?api-key=yourkey ```  ``` https://api.nytimes.com/svc/books/v3/reviews.json?author=Stephen+King&api-key=yourkey ``` 

    The version of the OpenAPI document: 3.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nytimes_python_sdk import schemas  # noqa: F401


class ListGetBestSellersResponseResultsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            list_name = schemas.StrSchema
            display_name = schemas.StrSchema
            bestsellers_date = schemas.StrSchema
            published_date = schemas.StrSchema
            rank = schemas.IntSchema
            rank_last_week = schemas.IntSchema
            weeks_on_list = schemas.IntSchema
            asterisk = schemas.IntSchema
            dagger = schemas.IntSchema
            amazon_product_url = schemas.StrSchema
        
            @staticmethod
            def isbns() -> typing.Type['ListGetBestSellersResponseResultsItemIsbns']:
                return ListGetBestSellersResponseResultsItemIsbns
        
            @staticmethod
            def book_details() -> typing.Type['ListGetBestSellersResponseResultsItemBookDetails']:
                return ListGetBestSellersResponseResultsItemBookDetails
        
            @staticmethod
            def reviews() -> typing.Type['ListGetBestSellersResponseResultsItemReviews']:
                return ListGetBestSellersResponseResultsItemReviews
            __annotations__ = {
                "list_name": list_name,
                "display_name": display_name,
                "bestsellers_date": bestsellers_date,
                "published_date": published_date,
                "rank": rank,
                "rank_last_week": rank_last_week,
                "weeks_on_list": weeks_on_list,
                "asterisk": asterisk,
                "dagger": dagger,
                "amazon_product_url": amazon_product_url,
                "isbns": isbns,
                "book_details": book_details,
                "reviews": reviews,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["list_name"]) -> MetaOapg.properties.list_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bestsellers_date"]) -> MetaOapg.properties.bestsellers_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["published_date"]) -> MetaOapg.properties.published_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rank"]) -> MetaOapg.properties.rank: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rank_last_week"]) -> MetaOapg.properties.rank_last_week: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weeks_on_list"]) -> MetaOapg.properties.weeks_on_list: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["asterisk"]) -> MetaOapg.properties.asterisk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dagger"]) -> MetaOapg.properties.dagger: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amazon_product_url"]) -> MetaOapg.properties.amazon_product_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isbns"]) -> 'ListGetBestSellersResponseResultsItemIsbns': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["book_details"]) -> 'ListGetBestSellersResponseResultsItemBookDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviews"]) -> 'ListGetBestSellersResponseResultsItemReviews': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["list_name", "display_name", "bestsellers_date", "published_date", "rank", "rank_last_week", "weeks_on_list", "asterisk", "dagger", "amazon_product_url", "isbns", "book_details", "reviews", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["list_name"]) -> typing.Union[MetaOapg.properties.list_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_name"]) -> typing.Union[MetaOapg.properties.display_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bestsellers_date"]) -> typing.Union[MetaOapg.properties.bestsellers_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["published_date"]) -> typing.Union[MetaOapg.properties.published_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rank"]) -> typing.Union[MetaOapg.properties.rank, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rank_last_week"]) -> typing.Union[MetaOapg.properties.rank_last_week, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weeks_on_list"]) -> typing.Union[MetaOapg.properties.weeks_on_list, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["asterisk"]) -> typing.Union[MetaOapg.properties.asterisk, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dagger"]) -> typing.Union[MetaOapg.properties.dagger, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amazon_product_url"]) -> typing.Union[MetaOapg.properties.amazon_product_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isbns"]) -> typing.Union['ListGetBestSellersResponseResultsItemIsbns', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["book_details"]) -> typing.Union['ListGetBestSellersResponseResultsItemBookDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviews"]) -> typing.Union['ListGetBestSellersResponseResultsItemReviews', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["list_name", "display_name", "bestsellers_date", "published_date", "rank", "rank_last_week", "weeks_on_list", "asterisk", "dagger", "amazon_product_url", "isbns", "book_details", "reviews", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        list_name: typing.Union[MetaOapg.properties.list_name, str, schemas.Unset] = schemas.unset,
        display_name: typing.Union[MetaOapg.properties.display_name, str, schemas.Unset] = schemas.unset,
        bestsellers_date: typing.Union[MetaOapg.properties.bestsellers_date, str, schemas.Unset] = schemas.unset,
        published_date: typing.Union[MetaOapg.properties.published_date, str, schemas.Unset] = schemas.unset,
        rank: typing.Union[MetaOapg.properties.rank, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        rank_last_week: typing.Union[MetaOapg.properties.rank_last_week, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        weeks_on_list: typing.Union[MetaOapg.properties.weeks_on_list, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        asterisk: typing.Union[MetaOapg.properties.asterisk, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        dagger: typing.Union[MetaOapg.properties.dagger, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        amazon_product_url: typing.Union[MetaOapg.properties.amazon_product_url, str, schemas.Unset] = schemas.unset,
        isbns: typing.Union['ListGetBestSellersResponseResultsItemIsbns', schemas.Unset] = schemas.unset,
        book_details: typing.Union['ListGetBestSellersResponseResultsItemBookDetails', schemas.Unset] = schemas.unset,
        reviews: typing.Union['ListGetBestSellersResponseResultsItemReviews', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ListGetBestSellersResponseResultsItem':
        return super().__new__(
            cls,
            *args,
            list_name=list_name,
            display_name=display_name,
            bestsellers_date=bestsellers_date,
            published_date=published_date,
            rank=rank,
            rank_last_week=rank_last_week,
            weeks_on_list=weeks_on_list,
            asterisk=asterisk,
            dagger=dagger,
            amazon_product_url=amazon_product_url,
            isbns=isbns,
            book_details=book_details,
            reviews=reviews,
            _configuration=_configuration,
            **kwargs,
        )

from nytimes_python_sdk.model.list_get_best_sellers_response_results_item_book_details import ListGetBestSellersResponseResultsItemBookDetails
from nytimes_python_sdk.model.list_get_best_sellers_response_results_item_isbns import ListGetBestSellersResponseResultsItemIsbns
from nytimes_python_sdk.model.list_get_best_sellers_response_results_item_reviews import ListGetBestSellersResponseResultsItemReviews
